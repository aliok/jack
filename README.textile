
h1. Introduction

*Jack* is a toolkit for mocking JavaScript objects and functions when writing tests. It is inspired by similar projects for Java and C#, like "JMock":http://www.jmock.org/, "Mockito":http://mockito.org/ and "Rhino Mocks":http://www.ayende.com/projects/rhino-mocks.aspx

Mocking can be achieved quite easily in JavaScript without help from a library, but anything above verifying that a function gets called can grow hard to read. Jack is intended to be fun to use and easy to read.

h1. Examples

For these examples, the application under test has a function storeSomething() that we expect will call the jQuery.post() function.

h2.Expect one call to function

bc. jack(function(){
   jack.expect("jQuery.post").exactly("1 time");
   storeSomething();
});

Available call quantifiers: never(), once(), exactly(), atLeast(), atMost()

h2. Expect argument values

bc. jack(function(){
   jack.expect("jQuery.post")
      .exactly("1 time")
      .withArguments("http://example.com/service");

   storeSomething();
});

h2. Set other argument constraints

bc. jack(function(){
   jack.expect("jQuery.post")
      .exactly("1 time")
      .whereArgument(0).isOneOf("/serviceOne","/serviceTwo");

   storeSomething();
});

h2. Available constraint methods: is(), isNot(), isOneOf(), isType(), matches(), hasProperty(), hasProperties()

Specifying a mock implementation of a function

bc. jack(function(){
   jack.expect("jQuery.post")
      .exactly("1 time")
      .mock(function() {
          // your mock implementation
      });

   storeSomething();
});

h2. Specifying a return value

bc. jack(function(){
   jack.expect("jQuery.post")
      .exactly("1 time")
      .returnValue("The value to return.");

   storeSomething();
});

h2. Creating a mock object

bc. jack(function(){
   var services = jack.create("services", ['serviceOne','serviceTwo']);

   jack.expect("services.serviceOne")
      .exactly("1 time")
      .whereArgument(0).is("something");

   useServices(services); 
});










